{"version":3,"sources":["components/page/style.module.css","components/wheel/style.module.css","components/branding/style.module.css","img/branding.svg","components/method-radio/style.module.css","constants.js","components/wheel/index.js","redux/actions/app.js","components/wheel/component.js","components/branding/component.js","components/branding/index.js","components/page/component.js","components/method-radio/index.js","components/method-radio/component.js","redux/stores/app.js","redux/createStore.js","redux/reducers/reducer.js","App.js","index.js"],"names":["module","exports","CNST","SUCCESS","connect","state","colorMethod","picker","dispatch","setColorsToSet","props","data","type","payload","useState","tinycolor","triad","combinations","setCombinations","updateColors","color","newComb","map","curr","toHexString","setColors","handleColorChange","useCallback","hexString","useEffect","on","off","className","styles","wrap","id","style","backgroundColor","getColorArray","path","colorString","filter","undefined","attributes","textContent","includes","svgPaths","colorsToSet","console","log","Object","values","colorArr","ind","forEach","fill","imgWrap","branding","img","Page","setColor","header","logo","nav","bg","container","headline","subHeadline","button","setColorMethod","handleRadioClick","e","target","value","name","input","defaultChecked","onClick","htmlFor","label","app","iro","ColorPicker","width","colors","store","createStore","action","window","__REDUX_DEVTOOLS_EXTENSION__","addEventListener","allNodes","document","getElementById","contentDocument","querySelectorAll","firstColor","secondColor","thirdColor","App","render"],"mappings":"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","file":"static/js/main.ddd45d46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3HbQB\",\"header\":\"style_header__34GId\",\"logo\":\"style_logo__1EI-E\",\"nav\":\"style_nav__uKNVq\",\"bg\":\"style_bg__SgySA\",\"button\":\"style_button__1aT8B\",\"headline\":\"style_headline__30SN0\",\"subHeadline\":\"style_subHeadline__2QMK9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"style_wrap__1P6Ot\",\"combinations\":\"style_combinations__dzUs9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgWrap\":\"style_imgWrap__2MeVw\",\"img\":\"style_img__3AnrZ\"};","module.exports = __webpack_public_path__ + \"static/media/branding.96be13b9.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"style_wrap__2CVhb\",\"label\":\"style_label__176Vf\",\"input\":\"style_input__3WCRU\"};","export const CNST = {\r\n    SET_COLOR_METHOD: {\r\n        SUCCESS: \"SET_COLOR_METHOD_SUCCESS\"\r\n    },\r\n    SET_SVG_PATHS:{\r\n        SUCCESS: \"SET_SVG_PATHS_SUCCESS\"\r\n    },\r\n    SET_COLORS_TO_SET:{\r\n      SUCCESS: \"SET_COLORS_TO_SET_SUCCESS\"\r\n    }\r\n};\r\n","import {Wheel} from \"./component\";\r\nimport {connect} from \"react-redux\";\r\nimport {setColorsToSet} from \"../../redux/actions/app\";\r\n\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        colorMethod: state.colorMethod,\r\n        picker: state.picker\r\n    };\r\n};\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n    setColorsToSet: (props) => dispatch(setColorsToSet(props)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Wheel);\r\n","import {CNST} from \"./../../constants\"\r\n\r\nexport function setColorMethodAction (data){\r\n  return{\r\n    type: CNST.SET_COLOR_METHOD.SUCCESS,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport function setSvgPathsAction (data){\r\n  return{\r\n    type: CNST.SET_SVG_PATHS.SUCCESS,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport function setColorsToSet (data){\r\n  return{\r\n    type: CNST.SET_COLORS_TO_SET.SUCCESS,\r\n    payload: data\r\n  }\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport styles from \"./style.module.css\"\r\nimport * as tinycolor from \"tinycolor2\"\r\n\r\n\r\nexport const Wheel = ({colorMethod, picker, setColorsToSet}) => {\r\n    const [combinations, setCombinations] = useState(tinycolor(\"#f00\").triad());\r\n\r\n    const updateColors = (color) => {\r\n        const newComb = tinycolor(color)[colorMethod](3, 5).map(curr => curr.toHexString());\r\n        setCombinations(newComb);\r\n        picker.setColors(newComb);\r\n        setColorsToSet(newComb);\r\n    };\r\n\r\n    const handleColorChange = useCallback((color) => {\r\n        updateColors(color.hexString);\r\n    }, [colorMethod]);\r\n\r\n    useEffect(() => { //setting up picker on mount\r\n        picker.on('color:change', handleColorChange);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        picker.off('color:change', handleColorChange);\r\n        updateColors(combinations[0]);\r\n        picker.on('color:change', handleColorChange);\r\n    }, [colorMethod]);\r\n\r\n    return (\r\n        <div className={styles.wrap}>\r\n            <div id=\"picker\"/>\r\n            <div className={styles.combinations}>\r\n                <div style={{\r\n                    backgroundColor: combinations[0]\r\n                }}/>\r\n                <div style={{\r\n                    backgroundColor: combinations[1]\r\n                }}/>\r\n                <div style={{\r\n                    backgroundColor: combinations[2]\r\n                }}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n","import React, {useEffect, useState, useLayoutEffect} from \"react\";\r\nimport branding from \"../../img/branding.svg\";\r\nimport styles from \"./style.module.css\";\r\n\r\n\r\nexport const getColorArray = (path, color) => {\r\n    path = [...path];\r\n    const colorString = \"fill:\" + color;\r\n    return path.filter(path => {\r\n        if (path.attributes.style !== undefined) {\r\n            return path.attributes.style.textContent.includes(colorString);\r\n        }\r\n    });\r\n};\r\n\r\nexport const Branding = ({svgPaths, colorsToSet}) => {\r\n\r\n    useEffect(() => {\r\n        console.log(svgPaths);\r\n        if (svgPaths !== undefined)\r\n            Object.values(svgPaths).map((colorArr, ind) => colorArr.forEach(color => color.style.fill = colorsToSet[ind]));\r\n\r\n        // colorsToSet.map(colorArr=>colorArr.forEach(color => color.style.fill = \"red\"));\r\n    }, [colorsToSet, svgPaths]);\r\n\r\n    return (\r\n        <div className={styles.imgWrap} id=\"branding\">\r\n            <object data={branding} type=\"image/svg+xml\" className={styles.img} id=\"brandingObj\"/>\r\n        </div>\r\n    )\r\n};\r\n","import {Branding} from \"./component\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        svgPaths: state.svgPaths,\r\n        colorsToSet: state.colorsToSet\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Branding);\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./style.module.css\";\r\n\r\n\r\nexport const Page = (props) => {\r\n\r\n    const {color, setColor} = useState(\"blue\");\r\n\r\n    const buttonStyle = {\r\n        backgroundColor: \"white\"\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <header className={styles.header}>\r\n                <h1 className={styles.logo}>Logo</h1>\r\n                <nav>\r\n                    <ul className={styles.nav}>\r\n                        <li>Home</li>\r\n                        <li>About</li>\r\n                        <li>Profile</li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n            <section className={styles.bg}>\r\n                <div className={styles.container}>\r\n                    <h2 className={styles.headline}>Applying your colors <br/> to the website</h2>\r\n                    <p className={styles.subHeadline}>This is how your webpage will look like with <br/>\r\n                    chosen color scheme.</p>\r\n                    <button className={styles.button}>Button</button>\r\n                    <button className={styles.button} style={buttonStyle}>Button</button>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n};\r\n","import {MethodRadio} from \"./component\";\r\nimport {connect} from \"react-redux\";\r\nimport {setColorMethodAction} from \"../../redux/actions/app\";\r\n\r\nexport const mapDispatchToProps = (dispatch) => ({\r\n    setColorMethod: (props) => dispatch(setColorMethodAction(props)),\r\n});\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps\r\n)(MethodRadio);\r\n","import React, {useCallback} from \"react\";\r\nimport styles from \"./style.module.css\"\r\n\r\nexport const MethodRadio = ({setColorMethod}) => {\r\n    const handleRadioClick = useCallback((e)=>{\r\n        setColorMethod(e.target.value);\r\n    },[setColorMethod]);\r\n\r\n    return (\r\n        <div className={styles.wrap}>\r\n            <input type=\"radio\" value=\"triad\" id=\"triad\" name=\"method\" className={styles.input} defaultChecked onClick={handleRadioClick}/>\r\n            <label htmlFor=\"triad\" className={styles.label}>Triad </label>\r\n            <input type=\"radio\" value=\"monochromatic\" id=\"monochromatic\" name=\"method\" className={styles.input} onClick={handleRadioClick}/>\r\n            <label htmlFor=\"monochromatic\" className={styles.label}> Monochromatic</label>\r\n            <input type=\"radio\" value=\"analogous\" id=\"analogous\" name=\"method\" className={styles.input} onClick={handleRadioClick}/>\r\n            <label htmlFor=\"analogous\" className={styles.label}> Analogous</label>\r\n            <input type=\"radio\" value=\"splitcomplement\" id=\"splitcomplement\" name=\"method\" className={styles.input} onClick={handleRadioClick}/>\r\n            <label htmlFor=\"splitcomplement\" className={styles.label}> Split complementary</label>\r\n        </div>\r\n    )\r\n};\r\n","import iro from \"@jaames/iro\";\r\n\r\nconst app = {\r\n    colorMethod: \"triad\",\r\n    picker: new iro.ColorPicker(\"#picker\", {\r\n        width: 400,\r\n        colors: [\"#f00\", \"#0f0\", \"#00f\"]\r\n    }),\r\n    svgPaths: [],\r\n    colorsToSet: [\"#f00\", \"#0f0\", \"#00f\"]\r\n};\r\n\r\nexport default app;\r\n","import { createStore } from \"redux\";\r\nimport app from \"./stores/app\"\r\nimport reducer from \"./reducers/reducer\";\r\n\r\nconst store = createStore(reducer, app,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n\r\n\r\nexport default store;\r\n","import app from \"../stores/app\";\r\nimport {CNST} from \"../../constants\";\r\n\r\nexport default function (state = app, action) {\r\n  switch (action.type) {\r\n    case CNST.SET_COLOR_METHOD.SUCCESS:\r\n      return {\r\n        ...state,\r\n        colorMethod: action.payload,\r\n      };\r\n    case CNST.SET_SVG_PATHS.SUCCESS:\r\n      return {\r\n        ...state,\r\n        svgPaths: action.payload,\r\n      };\r\n    case CNST.SET_COLORS_TO_SET.SUCCESS:\r\n      return {\r\n        ...state,\r\n        colorsToSet: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Wheel from \"./components/wheel\";\nimport Branding from \"./components/branding\";\nimport {getColorArray} from \"./components/branding/component\";\nimport {Page} from \"./components/page/component\";\nimport MethodRadio from \"./components/method-radio\";\nimport {setSvgPathsAction} from \"./redux/actions/app\";\nimport store from \"./redux/createStore\";\n\nwindow.addEventListener(\"load\", () => {\n    const obj = document.getElementById(\"brandingObj\");\n    const svg = obj.contentDocument;\n    let allNodes = svg.querySelectorAll(\"path\");\n    const firstColor = getColorArray(allNodes, \"#f57b26\");\n    const secondColor = getColorArray(allNodes, \"#ff4b30\");\n    const thirdColor = getColorArray(allNodes, \"#394240\");\n    store.dispatch(setSvgPathsAction({firstColor, secondColor, thirdColor}));\n});\n\n\nfunction App() {\n\n\n    return (\n        <div>\n            <div className=\"app\">\n                <Branding/>\n                <div>\n                    <MethodRadio/>\n                    <Wheel/>\n                </div>\n\n            </div>\n            <Page/>\n        </div>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom'\nimport App from './App';\nimport store from \"./redux/createStore\";\nimport {Provider} from \"react-redux\";\n\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}